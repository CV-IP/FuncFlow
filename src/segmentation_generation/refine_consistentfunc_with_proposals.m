function [refined_mask, IOUs] = refine_consistentfunc_with_proposals(input_mask, img, proposals)
%% ===============================
%% Refines a heatmap into a binary mask using any proposals
%=================================
%% INPUT:
% input_mask - (H x W double) the input heatmap to match a binary mask to
% img - (H x W x 3 double) the original rgb image
% proposals - (1 x N cell, N is the number of proposals) these are proposal binary masks
%=================================
%% OUTPUT:
% refined_mask - (H x W double) the final output mask generated by 'GOP'
%% ===============================
%% Compute the relaxed IOU score for each proposal

IOUs_seg = zeros(1, length(proposals));
for i=1:length(proposals)
    m = proposals{i};
    intersection_seg = sum(sum(m .* input_mask))^2 / sum(sum(logical(m .* input_mask)));
    %intersection_seg = sum(sum(m .* input_mask))^2;
    
    inverse_input_mask = input_mask;
    inverse_input_mask(inverse_input_mask ~= 0) = 1 - inverse_input_mask(inverse_input_mask~=0);
    union_seg = sum(sum(logical(m + inverse_input_mask)));
    IOUs_seg(i) = intersection_seg/union_seg;
end
IOUs = IOUs_seg;
IOUs(isnan(IOUs)) = 0;

[~, max_id] = max(IOUs);
refined_mask = double(proposals{max_id});

%=================================================
%% Find the top k proposals given their RIOU scores
% k =1;
% [~, ids] = sort(IOUs);
% top_k = ids(end-k + 1:end);
% top_props = cell(k,1);
% for z = 1:k
%     new_prop = proposals{top_k(z)};
%     new_mask = new_prop;
%     top_props{z} = reshape(new_mask, 1, []);
% end
% 
% top_props = cell2mat(top_props);
% total_intersection = prod(top_props,1);
% %=================================================
% %% Pick proposal which corresponds with the intersection of the top k proposals
% top_IOUs = zeros(1,k);
% for r = 1:k
%     intersection = sum(top_props(r,:).*total_intersection);
%     union = sum(logical(top_props(r,:) + total_intersection));
%     top_IOUs(r) = intersection/union;
% end
% 
% [~, bestid] = max(top_IOUs);
% refined_mask = reshape(top_props(bestid,:), size(img,1), size(img,2));
%====================================================
%% Code for debugging with figures
%====================================================
%refined_mask = intersect_mask;

% [~, maxid] = max(IOUs);
% final_mask = props(maxid,:);
% refined_mask = double(uint8(final_mask(os.s()+1)));
%figure; imagesc(refined_mask); input(' ');



% figure;
% subplot(1,11,1); imshow(img);
% for t=1:10
%     next = props(ids(end - t + 1),:);
%     examp = double(uint8(next(os.s()+1)));
%     subplot(1,11,t+1); imshow(examp);
% end
% input(' ' );
%=====================================================
end